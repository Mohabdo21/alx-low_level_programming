1.  **radix_sort(int *array, size_t size)**: This is the main function that initiates the Radix Sort. It checks if the size of the array is less than 2, if so, it returns without doing anything as an array of size less than 2 is already sorted. If the size is 2 or more, it allocates memory for a temporary array `output` of the same size as the input array. It then finds the maximum element in the array. After that, it calls the `base_sort` function with the entire array, the temporary array, the size of the array, the maximum element, and the initial exponent as 0. After the sorting is done, it frees the memory allocated for `output`.

2.  **base_sort(int *input, int *output, size_t size, int max, int expo)**: This function sorts the array based on the digit at the position specified by `expo`. It initializes an array `prefix_sum` to count the frequency of each digit. It then calculates the prefix sum of the frequencies. It uses this prefix sum to place each element from the input array to the correct position in the output array. After placing all elements, it copies the sorted elements back to the input array and prints them. If the maximum element is not zero, it calls itself recursively with the maximum element divided by 10 and the exponent incremented by 1.

3.  **_pow(int b, int e)**: This is a helper function that calculates the power of a number. It uses recursion to calculate the power. If the exponent is less than or equal to 0, it returns 1. If the exponent is 1, it returns the base. Otherwise, it returns the base multiplied by the power of the base with the exponent decremented by 1.
