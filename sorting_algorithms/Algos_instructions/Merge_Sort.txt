1.  **merge_sort(int *array, size_t size)**: This is the main function that initiates the Merge Sort. It checks if the size of the array is less than 2, if so, it returns without doing anything as an array of size less than 2 is already sorted. If the size is 2 or more, it allocates memory for a temporary array `b` of the same size as the input array. It then calls the `td_split` function with the entire array and the temporary array. After the sorting is done, it frees the memory allocated for `b`.

2.  **td_split(int *a, int start, int end, int *b)**: This function recursively divides the array into two halves until the size of the array is more than 1. It calculates the middle index `mid` of the array. It then calls itself twice, once for the first half of the array and then for the second half. After that, it calls the `td_merge` function to merge the two halves.

3.  **td_merge(int *b, int start, int mid, int end, int *a)**: This function merges the two halves of the array. It iterates over the array, comparing each element from the first half with the corresponding element from the second half. If the element from the first half is smaller or equal, it copies it to the temporary array `b`, otherwise, it copies the element from the second half. It also prints the elements of the left and right halves. After the merging is done, it copies the sorted elements back to the original array `a` and prints them.
