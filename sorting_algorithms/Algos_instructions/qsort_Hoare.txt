1.  **quick_sort_hoare(int *array, size_t size)**: This is the main function that initiates the Quick Sort using Hoare's partition scheme. It checks if the size of the array is less than 2, if so, it returns without doing anything as an array of size less than 2 is already sorted. If the size is 2 or more, it calls the `qsort_Hoare` function with the entire array and the indices of the first and last elements.

2.  **qsort_Hoare(int *arr, int lo, int hi, size_t size)**: This function recursively sorts the array. It checks if the low index `lo` is less than the high index `hi`. If so, it calls the `partition_Hoare` function to partition the array and get the pivot index. It then calls itself twice, once for the left subarray and then for the right subarray.

3.  **partition_Hoare(int *arr, int lo, int hi, size_t size)**: This function partitions the array using Hoare's partition scheme. It initializes two pointers `i` and `j` at one position before the low index and one position after the high index respectively. It also initializes the pivot as the element at the high index. It then enters an infinite loop where it increments `i` until it points to an element greater than the pivot and decrements `j` until it points to an element less than the pivot. If `i` is greater than or equal to `j`, it breaks the loop and returns `i - 1` as the pivot index. Otherwise, it swaps the elements at `i` and `j` and prints the array.
