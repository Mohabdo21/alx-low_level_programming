1.  **bitonic_sort(int *array, size_t size)**: This is the main function that initiates the Bitonic Sort. It checks if the size of the array is less than 2, if so, it returns without doing anything as an array of size less than 2 is already sorted. If the size is 2 or more, it calls the `bsort` function with the entire array, direction as 1 (indicating ascending order), and the size of the array.

2.  **bsort(int *arr, int low, size_t count, int dir, size_t size)**: This function recursively divides the array into two halves until the count is more than 1. It prints the array at each step of merging. It calls itself twice, once for the first half of the array in ascending order (dir = 1), and then for the second half in descending order (dir = 0). After that, it calls the `bmerge` function to sort and merge the two halves.

3.  **bmerge(int *arr, int low, size_t count, int dir, size_t size)**: This function sorts and merges the two halves of the array. It iterates over the array, comparing each element with its distant pair (distance is half of the count initially and decreases by half in each iteration). If the pair is in the wrong order (based on the direction), it swaps them using XOR operations. After sorting, it prints the array.
